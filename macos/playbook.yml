- name: Install software
  hosts: localhost 
  become: false 
  vars:
    workspace_directory: "{{ ansible_env.HOME }}/workspace"
    node_versions:
      - version: 16.16.0
        default: true
      - version: 18.14.2
    python_versions:
      - version: 3.10.6
        default: true
    java_versions:
      - version: openjdk@11
      - version: openjdk@17
        default: true
  
  tasks:
  - name: Install Prerequisites
    community.general.homebrew:
      name:
        - stow
        - git
        - curl
      state: present
    tags:
      - homebrew

  - name: Ensure workspace directory exists
    file:
      path: "{{ workspace_directory }}"
      state: directory
    tags:
    - workspace

  - name: Get dotfiles
    ansible.builtin.git:
      repo: 'https://github.com/DeanGaffney/dotfiles.git'
      dest: "{{ workspace_directory }}/dotfiles"
    tags:
      - dotfiles
      - tmux
      - zsh
      - git

  - name: Install oh-my-zsh
    ansible.builtin.shell: >
      which zsh || sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/plugins/zsh-autosuggestions
      git clone https://github.com/jeffreytse/zsh-vi-mode ~/.oh-my-zsh/plugins/zsh-vi-mode
      git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting
    tags:
      - zsh

  - name: Link dotfiles
    ansible.builtin.shell: >
        cd "{{ workspace_directory }}" && stow --adopt dotfiles 
    tags:
      - dotfiles
      - tmux
      - zsh

  - name: Get tmux plugin manager
    ansible.builtin.git:
      repo: https://github.com/tmux-plugins/tpm
      dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
    tags:
      - tmux
      - git

  - name: Get Neovim Config
    ansible.builtin.git:
      repo: 'https://github.com/DeanGaffney/neovim-config.git'
      dest: "{{ ansible_env.HOME }}/.config/nvim"
    tags:
      - neovim
      - git

  - name: Install Homebrew packages
    community.general.homebrew:
      name: 
        - ninja
        - libtool 
        - cmake 
        - pkg-config 
        - gettext 
        - rust
        - go
        - pyenv
        - jq
        - cfn-lint
        - awscli
        - docker
        - zsh
        - nvm
        - gh
        - tmux
        - codespell
        - shellcheck
        - maven
      state: present
    tags:
      - homebrew

  - name: Install Homebrew casks
    community.general.homebrew_cask:
      name: 
        - visual-studio-code
        - google-chrome
        - postman
        - alacritty
        - rectangle
        - font-hack-nerd-font
        - spotify
      state: present
      accept_external_apps: true
    tags:
      - homebrew

  - name: Install Java Versions
    community.general.homebrew:
      name: "{{ item.version }}"
      state: present
    with_items: "{{ java_versions }}"
    tags: 
      - java

  - name: Set Default Java Version
    ansible.builtin.lineinfile:
      path: "{{ ansible_env.HOME }}/.zshrc"
      search_string: 'export PATH="/opt/homebrew/opt/{{ item.version }}/bin:$PATH"'
      line:  'export PATH="/opt/homebrew/opt/{{ item.version }}/bin:$PATH"'
    with_items: "{{ java_versions }}"
    when: item.default is defined and item.default == true
    tags:
      - java
      - zsh

  - name: Install Node Versions
    ansible.builtin.shell: >
      source /opt/homebrew/opt/nvm/nvm.sh && nvm install {{ item.version }}
    with_items: "{{ node_versions }}"
    tags:
    - nodejs

  - name: Set Default Node Version
    ansible.builtin.shell: >
      source /opt/homebrew/opt/nvm/nvm.sh && nvm alias default {{ item.version }}
    with_items: "{{ node_versions }}"
    when: item.default is defined and item.default == true
    tags:
      - nodejs

  - name: Install Python Versions
    ansible.builtin.shell: >
      if ! ls {{ ansible_env.HOME }}/.pyenv/versions | grep {{ item.version }}; then
        pyenv install {{ item.version }}
      fi
    with_items: "{{ python_versions }}"
    tags:
      - python

  - name: Set Default Python Version
    ansible.builtin.shell: >
      pyenv global {{ item.version }}
    with_items: "{{ python_versions }}"
    when: item.default is defined and item.default == true
    tags:
      - python

  - name: Install Neovim
    ansible.builtin.shell: >
      bash "{{ ansible_env.HOME }}/.config/nvim/install.sh"
    tags:
      - neovim
