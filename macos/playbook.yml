- name: Install software
  hosts: localhost 
  become: false 
  vars:
    node_versions:
      - version: 14.21.3
      - version: 16.16.0
        default: true
      - version: 18.14.2
    python_versions:
      - version: 3.10.6
        default: true
    java_versions:
      - version: openjdk@11
      - version: openjdk@17
        default: true

  pre_tasks:
  - name: Ensure Homebrew is installed
    stat:
      path: /usr/local/bin/brew
    register: homebrew_check

  - name: Fail if Homebrew is not installed
    fail:
      msg: Homebrew is missing, run setup using setup.sh
    when:
      - not homebrew_check.stat.exists
  
  tasks:
  - name: Install oh-my-zsh
    ansible.builtin.shell: >
      which zsh || sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    tags:
      - zsh

  - name: Install Homebrew packages
    community.general.homebrew:
      name: 
        - ninja
        - libtool 
        - cmake 
        - pkg-config 
        - gettext 
        - curl
        - rust
        - go
        - pyenv
        - jq
        - cfn-lint
        - awscli
        - docker
        - zsh
        - nvm
        - gh
        - tmux
      state: present
    tags:
      - homebrew

  - name: Install Homebrew casks
    community.general.homebrew_cask:
      name:
        - visual-studio-code
        - google-chrome
        - postman
        - alacritty
      state: present
    tags:
      - homebrew

  - name: Install Java Versions
    community.general.homebrew:
      name: "{{ item.version }}"
      state: present
    with_items: "{{ java_versions }}"
    tags: 
      - java

  - name: Set Default Java Version
    ansible.builtin.shell: >
      if ! grep "{{ item.version }}" {{ ansible_env.HOME }}/.zshrc; then
        echo "export PATH=/usr/local/opt/{{ item.version }}/bin:$PATH" >> {{ ansible_env.HOME }}/.zshrc
      fi
    with_items: "{{ java_versions }}"
    when: item.default is defined and item.default == true
    tags:
      - java
      - zsh

  - name: Install Node Versions
    ansible.builtin.shell: >
      source {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install {{ item.version }}
    with_items: "{{ node_versions }}"
    tags:
    - nodejs

  - name: Set Default Node Version
    ansible.builtin.shell: >
      source {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm alias default {{ item.version }}
    with_items: "{{ node_versions }}"
    when: item.default is defined and item.default == true
    tags:
      - nodejs

  - name: Install Python Versions
    ansible.builtin.shell: >
      if ! ls {{ ansible_env.HOME }}/.pyenv/versions | grep {{ item.version }}; then
        pyenv install {{ item.version }}
      fi
    with_items: "{{ python_versions }}"
    tags:
      - python

  - name: Set Default Python Version
    ansible.builtin.shell: >
      pyenv global {{ item.version }}
    with_items: "{{ python_versions }}"
    when: item.default is defined and item.default == true
    tags:
      - python

  - name: Get Neovim Config
    ansible.builtin.git:
      repo: 'git@github.com:DeanGaffney/neovim-config.git'
      dest: "{{ ansible_env.HOME }}/.config/nvim"
    tags:
      - neovim

  - name: Install Neovim
    ansible.builtin.shell: >
      bash "{{ ansible_env.HOME }}/.config/nvim/install.sh"
    tags:
      - neovim
